PARA CADA PASSO VERIFICAR AS VARIÁVEIS QUE MAIS EXPLICARAM O RESULTADO FINAL
REFAZER OS MESMOS TESTES PARA A BASE DO SITE "http://www.football-data.co.uk/" 
TAMBÉM TRAZER AS TABELAS COMPARATIVAS ENTRE DIFERENTES ALGORITMOS, MÉTRICAS E AS VARIÁVEIS QUE MAIS EXPLICARAM O RESULTADO FINAL

OBS.: VER NOVAMENTE UM VÍDEO DE EDUARDO MENDES SOBRE WEBSCRAPING COM PYTHON APENAS PARA VER A ORGANIZAÇÃO DO CÓDIGO DELE


# fórmulas à mão
# acurácia
acc = (matriz_final[0][0] +  matriz_final[1][1] +  matriz_final[2][2])\
      / (matriz_final[0][0] +  matriz_final[1][1] +  matriz_final[2][2]\
      + matriz_final[0][1] +  matriz_final[0][2]\
      + matriz_final[1][0] +  matriz_final[1][2]\
      + matriz_final[2][0] +  matriz_final[2][1])
print(f'acurácia: {acc}')

# precisão
prec = ((matriz_final[0][0]/(matriz_final[0][0] + matriz_final[1][0] + matriz_final[2][0]))\
       + (matriz_final[1][1]/(matriz_final[0][1] + matriz_final[1][1] + matriz_final[2][1]))\
       + (matriz_final[2][2]/(matriz_final[0][2] + matriz_final[1][2] + matriz_final[2][2])))\
       / 3
print(f'precisão: {prec}')

# recall
rec = ((matriz_final[0][0]/(matriz_final[0][0] + matriz_final[0][1] + matriz_final[0][2]))\
       + (matriz_final[1][1]/(matriz_final[1][0] + matriz_final[1][1] + matriz_final[1][2]))\
       + (matriz_final[2][2]/(matriz_final[2][0] + matriz_final[2][1] + matriz_final[2][2])))\
       / 3
print(f'recall: {rec}')

f1_score = (2 * prec * rec) / (prec + rec)
print(f'f1-score: {f1_score}')


trinta_testes_cruzada.py => tem todos os classificadores
regra_trinta_testes = usa a biblioteca Orange e é um arquivo específico para trabalhar com regras